/**
 * HTTP API
 * The HTTP API for Event Store
 *
 * The version of the OpenAPI document: 5.0.4
 * Contact: chris.ward@eventstore.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { StreamData } from '../model/models';
import { StreamMetadataItem } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class StreamsService {

    protected basePath = 'https://eventstore.org';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object") {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * An alternative URL to post events to
     * A URL generated by Event Store if you don\&#39;t supply an ID when creating a stream. You then use this URL to post events to.
     * @param stream The name of the stream
     * @param guid Autogenerated UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public alternativeStreamURL(stream: string, guid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public alternativeStreamURL(stream: string, guid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public alternativeStreamURL(stream: string, guid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public alternativeStreamURL(stream: string, guid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling alternativeStreamURL.');
        }
        if (guid === null || guid === undefined) {
            throw new Error('Required parameter guid was null or undefined when calling alternativeStreamURL.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}/incoming/${encodeURIComponent(String(guid))}`,
            null,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a stream
     * Delete specified stream
     * @param stream The stream ID to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAStream(stream: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public deleteAStream(stream: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public deleteAStream(stream: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public deleteAStream(stream: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling deleteAStream.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all events from all streams
     * Returns all events from all streams, you must provide user details.
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllEvents(embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public getAllEvents(embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public getAllEvents(embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public getAllEvents(embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (embed !== undefined && embed !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>embed, 'embed');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/streams/$all`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Paginate backwards through stream events
     * Paginate backwards though stream events by a specified amount.
     * @param stream The stream ID
     * @param event The event ID
     * @param count How many events to skip backwards from in the request.
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public getNEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public getNEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public getNEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling getNEvents.');
        }
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling getNEvents.');
        }
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling getNEvents.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (embed !== undefined && embed !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>embed, 'embed');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}/${encodeURIComponent(String(event))}/${encodeURIComponent(String(count))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Paginate backwards through stream events
     * Paginate backwards though stream events by a specified amount.
     * @param stream The stream ID
     * @param event The event ID
     * @param count How many events to skip backwards from in the request.
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pageBackThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public pageBackThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public pageBackThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public pageBackThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling pageBackThroughEvents.');
        }
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling pageBackThroughEvents.');
        }
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling pageBackThroughEvents.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (embed !== undefined && embed !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>embed, 'embed');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}/${encodeURIComponent(String(event))}/backward/${encodeURIComponent(String(count))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Paginate forwards through stream events
     * Paginate forwards though stream events by a specified amount.
     * @param stream The stream ID
     * @param event The event ID
     * @param count How many events to skip forwards in the request.
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pageForwardThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public pageForwardThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public pageForwardThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public pageForwardThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling pageForwardThroughEvents.');
        }
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling pageForwardThroughEvents.');
        }
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling pageForwardThroughEvents.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (embed !== undefined && embed !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>embed, 'embed');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}/${encodeURIComponent(String(event))}/forward/${encodeURIComponent(String(count))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reads a stream
     * Read a stream, receiving a standard AtomFeed document as a response.
     * @param stream The stream ID
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readAStream(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public readAStream(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public readAStream(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public readAStream(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling readAStream.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (embed !== undefined && embed !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>embed, 'embed');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read a stream event
     * Reads a single event from a stream.
     * @param stream The stream ID
     * @param event The event ID
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readStreamEvent(stream: string, event: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public readStreamEvent(stream: string, event: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public readStreamEvent(stream: string, event: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public readStreamEvent(stream: string, event: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling readStreamEvent.');
        }
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling readStreamEvent.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (embed !== undefined && embed !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>embed, 'embed');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}/${encodeURIComponent(String(event))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reads the metadata of a stream
     * Returns metadata of a stream, typically information associated with an event that is not part of the event.
     * @param stream The stream ID
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readStreamMetadata(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public readStreamMetadata(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public readStreamMetadata(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public readStreamMetadata(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling readStreamMetadata.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (embed !== undefined && embed !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>embed, 'embed');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}/metadata`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update stream metadata
     * Update the metadata of a stream.
     * @param stream The name of the stream
     * @param streamMetadataItem Metadata object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStreamMetadata(stream: string, streamMetadataItem?: StreamMetadataItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public updateStreamMetadata(stream: string, streamMetadataItem?: StreamMetadataItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public updateStreamMetadata(stream: string, streamMetadataItem?: StreamMetadataItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public updateStreamMetadata(stream: string, streamMetadataItem?: StreamMetadataItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling updateStreamMetadata.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}/metadata`,
            streamMetadataItem,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Write to a stream
     * Write to a stream.
     * @param stream The name of the stream
     * @param streamData Stream events to create
     * @param eSExpectedVersion Expected stream version
     * @param eSEventType The event type associated to a posted body
     * @param eSEventId Event ID associated to a posted body
     * @param eSRequiresMaster Wether to run on a master node
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public writeToAStream(stream: string, streamData: StreamData, eSExpectedVersion?: number, eSEventType?: string, eSEventId?: number, eSRequiresMaster?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public writeToAStream(stream: string, streamData: StreamData, eSExpectedVersion?: number, eSEventType?: string, eSEventId?: number, eSRequiresMaster?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public writeToAStream(stream: string, streamData: StreamData, eSExpectedVersion?: number, eSEventType?: string, eSEventId?: number, eSRequiresMaster?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public writeToAStream(stream: string, streamData: StreamData, eSExpectedVersion?: number, eSEventType?: string, eSEventId?: number, eSRequiresMaster?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling writeToAStream.');
        }
        if (streamData === null || streamData === undefined) {
            throw new Error('Required parameter streamData was null or undefined when calling writeToAStream.');
        }

        let headers = this.defaultHeaders;
        if (eSExpectedVersion !== undefined && eSExpectedVersion !== null) {
            headers = headers.set('ES-ExpectedVersion', String(eSExpectedVersion));
        }
        if (eSEventType !== undefined && eSEventType !== null) {
            headers = headers.set('ES-EventType', String(eSEventType));
        }
        if (eSEventId !== undefined && eSEventId !== null) {
            headers = headers.set('ES-EventId', String(eSEventId));
        }
        if (eSRequiresMaster !== undefined && eSRequiresMaster !== null) {
            headers = headers.set('ES-RequiresMaster', String(eSRequiresMaster));
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/streams/${encodeURIComponent(String(stream))}`,
            streamData,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

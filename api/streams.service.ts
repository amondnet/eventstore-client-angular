/**
 * HTTP API
 * The HTTP API for Event Store
 *
 * OpenAPI spec version: 4.1.1
 * Contact: chris.ward@eventstore.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { StreamData } from '../model/streamData';
import { StreamMetadataItem } from '../model/streamMetadataItem';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StreamsService {

    protected basePath = 'https://eventstore.org';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * An alternative URL to post events to
     * A URL generated by Event Store if you don&#39;t supply an ID when creating a stream. You then use this URL to post events to.
     * @param stream The name of the stream
     * @param guid Autogenerated UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public alternativeStreamURL(stream: string, guid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public alternativeStreamURL(stream: string, guid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public alternativeStreamURL(stream: string, guid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public alternativeStreamURL(stream: string, guid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling alternativeStreamURL.');
        }
        if (guid === null || guid === undefined) {
            throw new Error('Required parameter guid was null or undefined when calling alternativeStreamURL.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}/incoming/${encodeURIComponent(String(guid))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a stream
     * Delete specified stream
     * @param stream The stream ID to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAStream(stream: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAStream(stream: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAStream(stream: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAStream(stream: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling deleteAStream.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all events from all streams
     * Returns all events from all streams, you must provide user details.
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllEvents(embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllEvents(embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllEvents(embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllEvents(embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (embed !== undefined && embed !== null) {
            queryParameters = queryParameters.set('embed', <any>embed);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/streams/$all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Paginate backwards through stream events
     * Paginate backwards though stream events by a specified amount.
     * @param stream The stream ID
     * @param event The event ID
     * @param count How many events to skip backwards from in the request.
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getNEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getNEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getNEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling getNEvents.');
        }
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling getNEvents.');
        }
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling getNEvents.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (embed !== undefined && embed !== null) {
            queryParameters = queryParameters.set('embed', <any>embed);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}/${encodeURIComponent(String(event))}/${encodeURIComponent(String(count))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Paginate backwards through stream events
     * Paginate backwards though stream events by a specified amount.
     * @param stream The stream ID
     * @param event The event ID
     * @param count How many events to skip backwards from in the request.
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pageBackThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pageBackThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pageBackThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pageBackThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling pageBackThroughEvents.');
        }
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling pageBackThroughEvents.');
        }
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling pageBackThroughEvents.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (embed !== undefined && embed !== null) {
            queryParameters = queryParameters.set('embed', <any>embed);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}/${encodeURIComponent(String(event))}/backward/${encodeURIComponent(String(count))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Paginate forwards through stream events
     * Paginate forwards though stream events by a specified amount.
     * @param stream The stream ID
     * @param event The event ID
     * @param count How many events to skip forwards in the request.
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pageForwardThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pageForwardThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pageForwardThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pageForwardThroughEvents(stream: string, event: string, count: number, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling pageForwardThroughEvents.');
        }
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling pageForwardThroughEvents.');
        }
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling pageForwardThroughEvents.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (embed !== undefined && embed !== null) {
            queryParameters = queryParameters.set('embed', <any>embed);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}/${encodeURIComponent(String(event))}/forward/${encodeURIComponent(String(count))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reads a stream
     * Read a stream, receiving a standard AtomFeed document as a response.
     * @param stream The stream ID
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readAStream(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean): Observable<any>;
    public readAStream(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public readAStream(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public readAStream(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling readAStream.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (embed !== undefined && embed !== null) {
            queryParameters = queryParameters.set('embed', <any>embed);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read a stream event
     * Reads a single event from a stream.
     * @param stream The stream ID
     * @param event The event ID
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readStreamEvent(stream: string, event: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean): Observable<any>;
    public readStreamEvent(stream: string, event: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public readStreamEvent(stream: string, event: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public readStreamEvent(stream: string, event: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling readStreamEvent.');
        }
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling readStreamEvent.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (embed !== undefined && embed !== null) {
            queryParameters = queryParameters.set('embed', <any>embed);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}/${encodeURIComponent(String(event))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reads the metadata of a stream
     * Returns metadata of a stream, typically information associated with an event that is not part of the event.
     * @param stream The stream ID
     * @param embed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readStreamMetadata(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'body', reportProgress?: boolean): Observable<any>;
    public readStreamMetadata(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public readStreamMetadata(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public readStreamMetadata(stream: string, embed?: 'None' | 'Content' | 'Rich' | 'Body' | 'PrettyBody' | 'TryHarder', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling readStreamMetadata.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (embed !== undefined && embed !== null) {
            queryParameters = queryParameters.set('embed', <any>embed);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}/metadata`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update stream metadata
     * Update the metadata of a stream.
     * @param stream The name of the stream
     * @param streamMetadataItem Metadata object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStreamMetadata(stream: string, streamMetadataItem?: StreamMetadataItem, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateStreamMetadata(stream: string, streamMetadataItem?: StreamMetadataItem, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateStreamMetadata(stream: string, streamMetadataItem?: StreamMetadataItem, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateStreamMetadata(stream: string, streamMetadataItem?: StreamMetadataItem, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling updateStreamMetadata.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}/metadata`,
            streamMetadataItem,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Write to a stream
     * Write to a stream.
     * @param stream The name of the stream
     * @param stream_data Stream events to create
     * @param ES_ExpectedVersion Expected stream version
     * @param ES_EventType The event type associated to a posted body
     * @param ES_EventId Event ID associated to a posted body
     * @param ES_RequiresMaster Wether to run on a master node
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public writeToAStream(stream: string, stream_data: StreamData, ES_ExpectedVersion?: number, ES_EventType?: string, ES_EventId?: number, ES_RequiresMaster?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public writeToAStream(stream: string, stream_data: StreamData, ES_ExpectedVersion?: number, ES_EventType?: string, ES_EventId?: number, ES_RequiresMaster?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public writeToAStream(stream: string, stream_data: StreamData, ES_ExpectedVersion?: number, ES_EventType?: string, ES_EventId?: number, ES_RequiresMaster?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public writeToAStream(stream: string, stream_data: StreamData, ES_ExpectedVersion?: number, ES_EventType?: string, ES_EventId?: number, ES_RequiresMaster?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling writeToAStream.');
        }
        if (stream_data === null || stream_data === undefined) {
            throw new Error('Required parameter stream_data was null or undefined when calling writeToAStream.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;
        if (ES_ExpectedVersion !== undefined && ES_ExpectedVersion !== null) {
            headers = headers.set('ES-ExpectedVersion', String(ES_ExpectedVersion));
        }
        if (ES_EventType !== undefined && ES_EventType !== null) {
            headers = headers.set('ES-EventType', String(ES_EventType));
        }
        if (ES_EventId !== undefined && ES_EventId !== null) {
            headers = headers.set('ES-EventId', String(ES_EventId));
        }
        if (ES_RequiresMaster !== undefined && ES_RequiresMaster !== null) {
            headers = headers.set('ES-RequiresMaster', String(ES_RequiresMaster));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/streams/${encodeURIComponent(String(stream))}`,
            stream_data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

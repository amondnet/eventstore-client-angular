/**
 * HTTP API
 * The HTTP API for Event Store
 *
 * OpenAPI spec version: 4.1.1
 * Contact: chris.ward@eventstore.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProjectionsService {

    protected basePath = 'https://eventstore.org';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Abort projection
     * Abort the specified projection.
     * @param name The name of the projection
     * @param enableRunAs Run as the user issuing the command.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public abortProjection(name: string, enableRunAs?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public abortProjection(name: string, enableRunAs?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public abortProjection(name: string, enableRunAs?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public abortProjection(name: string, enableRunAs?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling abortProjection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (enableRunAs !== undefined && enableRunAs !== null) {
            queryParameters = queryParameters.set('enableRunAs', <any>enableRunAs);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/command/abort`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a continious projection
     * Create a new continious projection.
     * @param name Name of the projection
     * @param enabled Is the projection enabled
     * @param checkpoints Are checkpoints enabled
     * @param emit Is emit enabled
     * @param type The projection type
     * @param trackemittedstreams Should your projection create a separate stream and write any streams it emits to that stream.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAContiniousProjection(name?: string, enabled?: boolean, checkpoints?: boolean, emit?: boolean, type?: 'JS', trackemittedstreams?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createAContiniousProjection(name?: string, enabled?: boolean, checkpoints?: boolean, emit?: boolean, type?: 'JS', trackemittedstreams?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createAContiniousProjection(name?: string, enabled?: boolean, checkpoints?: boolean, emit?: boolean, type?: 'JS', trackemittedstreams?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createAContiniousProjection(name?: string, enabled?: boolean, checkpoints?: boolean, emit?: boolean, type?: 'JS', trackemittedstreams?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (enabled !== undefined && enabled !== null) {
            queryParameters = queryParameters.set('enabled', <any>enabled);
        }
        if (checkpoints !== undefined && checkpoints !== null) {
            queryParameters = queryParameters.set('checkpoints', <any>checkpoints);
        }
        if (emit !== undefined && emit !== null) {
            queryParameters = queryParameters.set('emit', <any>emit);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (trackemittedstreams !== undefined && trackemittedstreams !== null) {
            queryParameters = queryParameters.set('trackemittedstreams', <any>trackemittedstreams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/projections/continuous`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a onetime projection
     * Create a new onetime projection.
     * @param name Name of the projection
     * @param type The projection type
     * @param enabled Is the projection enabled
     * @param checkpoints Are checkpoints enabled
     * @param emit Is emit enabled
     * @param trackemittedstreams Should your projection create a separate stream and write any streams it emits to that stream.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAOnetimeProjection(name?: string, type?: 'JS', enabled?: boolean, checkpoints?: boolean, emit?: boolean, trackemittedstreams?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createAOnetimeProjection(name?: string, type?: 'JS', enabled?: boolean, checkpoints?: boolean, emit?: boolean, trackemittedstreams?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createAOnetimeProjection(name?: string, type?: 'JS', enabled?: boolean, checkpoints?: boolean, emit?: boolean, trackemittedstreams?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createAOnetimeProjection(name?: string, type?: 'JS', enabled?: boolean, checkpoints?: boolean, emit?: boolean, trackemittedstreams?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (enabled !== undefined && enabled !== null) {
            queryParameters = queryParameters.set('enabled', <any>enabled);
        }
        if (checkpoints !== undefined && checkpoints !== null) {
            queryParameters = queryParameters.set('checkpoints', <any>checkpoints);
        }
        if (emit !== undefined && emit !== null) {
            queryParameters = queryParameters.set('emit', <any>emit);
        }
        if (trackemittedstreams !== undefined && trackemittedstreams !== null) {
            queryParameters = queryParameters.set('trackemittedstreams', <any>trackemittedstreams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/projections/onetime`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a transient projection
     * Create a new transient projection.
     * @param name Name of the projection
     * @param type The projection type
     * @param enabled Is the projection enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createATransientProjection(name?: string, type?: 'JS', enabled?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createATransientProjection(name?: string, type?: 'JS', enabled?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createATransientProjection(name?: string, type?: 'JS', enabled?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createATransientProjection(name?: string, type?: 'JS', enabled?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (enabled !== undefined && enabled !== null) {
            queryParameters = queryParameters.set('enabled', <any>enabled);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/projections/transient`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a projection
     * Deletes a projection
     * @param name The projection to delete
     * @param deleteStateStream TBD
     * @param deleteCheckpointStream TBD
     * @param deleteEmittedStreams TBD
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAProjection(name: string, deleteStateStream?: boolean, deleteCheckpointStream?: boolean, deleteEmittedStreams?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAProjection(name: string, deleteStateStream?: boolean, deleteCheckpointStream?: boolean, deleteEmittedStreams?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAProjection(name: string, deleteStateStream?: boolean, deleteCheckpointStream?: boolean, deleteEmittedStreams?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAProjection(name: string, deleteStateStream?: boolean, deleteCheckpointStream?: boolean, deleteEmittedStreams?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteAProjection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (deleteStateStream !== undefined && deleteStateStream !== null) {
            queryParameters = queryParameters.set('deleteStateStream', <any>deleteStateStream);
        }
        if (deleteCheckpointStream !== undefined && deleteCheckpointStream !== null) {
            queryParameters = queryParameters.set('deleteCheckpointStream', <any>deleteCheckpointStream);
        }
        if (deleteEmittedStreams !== undefined && deleteEmittedStreams !== null) {
            queryParameters = queryParameters.set('deleteEmittedStreams', <any>deleteEmittedStreams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disable projection
     * Disable the specified projection.
     * @param name The name of the projection
     * @param enableRunAs Run as the user issuing the command.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public disableProjection(name: string, enableRunAs?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public disableProjection(name: string, enableRunAs?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public disableProjection(name: string, enableRunAs?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public disableProjection(name: string, enableRunAs?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling disableProjection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (enableRunAs !== undefined && enableRunAs !== null) {
            queryParameters = queryParameters.set('enableRunAs', <any>enableRunAs);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/command/disable`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Enable projection
     * Enable the specified projection.
     * @param name The name of the projection
     * @param enableRunAs Run as the user issuing the command.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public enableProjection(name: string, enableRunAs?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public enableProjection(name: string, enableRunAs?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public enableProjection(name: string, enableRunAs?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public enableProjection(name: string, enableRunAs?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling enableProjection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (enableRunAs !== undefined && enableRunAs !== null) {
            queryParameters = queryParameters.set('enableRunAs', <any>enableRunAs);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/command/enable`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a projection
     * Returns a specific projection.
     * @param name The name of the projection
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAProjection(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAProjection(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAProjection(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAProjection(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getAProjection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all continious projections
     * Returns all continually running projections defined in Event Store.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllContiniousProjections(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllContiniousProjections(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllContiniousProjections(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllContiniousProjections(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projections/continuous`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all non-transient projections
     * Returns all known projections except ad-hoc projections.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllNonTransientProjections(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllNonTransientProjections(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllNonTransientProjections(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllNonTransientProjections(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projections/all-non-transient`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all projections
     * Returns all projections defined in Event Store.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllProjections(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllProjections(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllProjections(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllProjections(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projections/any`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all queries
     * Returns all queries defined in Event Store.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllQueries(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllQueries(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllQueries(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllQueries(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projections/onetime`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all transient projections
     * Returns all transient projections defined in Event Store.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTransientProjections(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllTransientProjections(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllTransientProjections(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllTransientProjections(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projections/transient`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the config of a projection
     * Returns the performance configuration of the specified projection.
     * @param name The name of the projection
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjectionConfig(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getProjectionConfig(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getProjectionConfig(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getProjectionConfig(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getProjectionConfig.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/config`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get projection definition
     * Returns definition of the specified projection.
     * @param name The name of the projection
     * @param config Wether to return the projection definition config.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjectionDefinition(name: string, config?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getProjectionDefinition(name: string, config?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getProjectionDefinition(name: string, config?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getProjectionDefinition(name: string, config?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getProjectionDefinition.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (config !== undefined && config !== null) {
            queryParameters = queryParameters.set('config', <any>config);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/query`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get projection statistics
     * Returns the statistics for a projection, such as how many events, the status etc.
     * @param name The name of the projection
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjectionStatistics(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getProjectionStatistics(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getProjectionStatistics(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getProjectionStatistics(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getProjectionStatistics.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/statistics`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get result of projection
     * Get the final result of a projection.
     * @param name The name of the projection
     * @param partition The partition name in state
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getResultOfProjection(name: string, partition?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getResultOfProjection(name: string, partition?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getResultOfProjection(name: string, partition?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getResultOfProjection(name: string, partition?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getResultOfProjection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (partition !== undefined && partition !== null) {
            queryParameters = queryParameters.set('partition', <any>partition);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/result`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the projection state
     * Return the current state of the specified projection.
     * @param name The name of the projection
     * @param partition The partition name in state
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTheProjectionState(name: string, partition?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getTheProjectionState(name: string, partition?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getTheProjectionState(name: string, partition?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getTheProjectionState(name: string, partition?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getTheProjectionState.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (partition !== undefined && partition !== null) {
            queryParameters = queryParameters.set('partition', <any>partition);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/state`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read events from projection based on a query definition
     * Read events from projection based on a query definition, i.e. fromAll, fromStream, fromStreams
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readProjectionEventsBasedOnAQuery(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public readProjectionEventsBasedOnAQuery(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public readProjectionEventsBasedOnAQuery(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public readProjectionEventsBasedOnAQuery(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/projections/read-events`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reset projection
     * Reset the specified projection.
     * @param name The name of the projection
     * @param enableRunAs Run as the user issuing the command.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetProjection(name: string, enableRunAs?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetProjection(name: string, enableRunAs?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetProjection(name: string, enableRunAs?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetProjection(name: string, enableRunAs?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling resetProjection.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (enableRunAs !== undefined && enableRunAs !== null) {
            queryParameters = queryParameters.set('enableRunAs', <any>enableRunAs);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/command/reset`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the config of a projection
     * Update the performance configuration of the specified projection.
     * @param name The name of the projection
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProjectionConfig(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateProjectionConfig(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateProjectionConfig(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateProjectionConfig(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling updateProjectionConfig.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/config`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update projection definition
     * Update the specified projection definition.
     * @param name The name of the projection
     * @param type The projection type
     * @param emit Is emit enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProjectionDefinition(name: string, type?: 'JS', emit?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateProjectionDefinition(name: string, type?: 'JS', emit?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateProjectionDefinition(name: string, type?: 'JS', emit?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateProjectionDefinition(name: string, type?: 'JS', emit?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling updateProjectionDefinition.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});


        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (emit !== undefined && emit !== null) {
            queryParameters = queryParameters.set('emit', <any>emit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/projection/${encodeURIComponent(String(name))}/query`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
